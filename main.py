import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    WebAppInfo
)
from dotenv import load_dotenv
import os
import sqlite3
import json

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('shop.db')
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            price REAL NOT NULL,
            category TEXT NOT NULL,
            image TEXT NOT NULL,
            popularity INTEGER DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher()

# URL –≤–∞—à–µ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
WEBAPP_URL = "https://gademoffshit.github.io/telegram-shop-bot/"

def get_main_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É", web_app=WebAppInfo(url=WEBAPP_URL))],
            [InlineKeyboardButton(text="–ß–∞—Ç –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º üí¨", callback_data="operator_chat")],
            [InlineKeyboardButton(text="–î–æ–ø–æ–º–æ–≥–∞", callback_data="help")]
        ]
    )
    return keyboard

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "–†–∞–¥—ñ –±–∞—á–∏—Ç–∏ —Ç–µ–±–µ —É –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñ CHASER | HOTSPOT üëç\n\n"
        "–ö—É–ø—É–π —É–ª—é–±–ª–µ–Ω–∏–π —Å–º–∞–∫ –∑—Ä—É—á–Ω–æ —Ç–∞ 24/7 —á–µ—Ä–µ–∑ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç üåê",
        reply_markup=get_main_keyboard()
    )

@dp.callback_query(lambda c: c.data == "operator_chat")
async def operator_chat(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —á–∞—Ç–∞ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"""
    await callback.message.answer(
        "–ù–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å."
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "help")
async def help_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    help_text = (
        "üõç –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ '–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É'\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã\n"
        "3. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –∫–æ—Ä–∑–∏–Ω—É\n"
        "4. –û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑\n\n"
        "‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ß–∞—Ç –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º'"
    )
    await callback.message.answer(help_text)
    await callback.answer()

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message(Command("add_product"))
async def add_product(message: types.Message):
    if not await is_admin(message):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        # –§–æ—Ä–º–∞—Ç: /add_product name|price|category|image_url
        product_data = message.text.replace('/add_product ', '').split('|')
        if len(product_data) != 4:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_product –Ω–∞–∑–≤–∞–Ω–∏–µ|—Ü–µ–Ω–∞|–∫–∞—Ç–µ–≥–æ—Ä–∏—è|—Å—Å—ã–ª–∫–∞_–Ω–∞_–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return

        name, price, category, image = product_data
        price = float(price)

        conn = sqlite3.connect('shop.db')
        c = conn.cursor()
        c.execute('INSERT INTO products (name, price, category, image) VALUES (?, ?, ?, ?)',
                 (name, price, category, image))
        conn.commit()
        conn.close()

        await message.answer(f"–¢–æ–≤–∞—Ä '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}")

@dp.message(Command("remove_product"))
async def remove_product(message: types.Message):
    if not await is_admin(message):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        product_id = int(message.text.replace('/remove_product ', ''))
        
        conn = sqlite3.connect('shop.db')
        c = conn.cursor()
        c.execute('DELETE FROM products WHERE id = ?', (product_id,))
        if c.rowcount > 0:
            conn.commit()
            await message.answer(f"–¢–æ–≤–∞—Ä —Å ID {product_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
        else:
            await message.answer(f"–¢–æ–≤–∞—Ä —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        conn.close()
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}")

@dp.message(Command("list_products"))
async def list_products(message: types.Message):
    if not await is_admin(message):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    conn = sqlite3.connect('shop.db')
    c = conn.cursor()
    c.execute('SELECT id, name, price, category FROM products')
    products = c.fetchall()
    conn.close()

    if not products:
        await message.answer("–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç.")
        return

    message_text = "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n\n"
    for product in products:
        message_text += f"ID: {product[0]}\n–ù–∞–∑–≤–∞–Ω–∏–µ: {product[1]}\n–¶–µ–Ω–∞: {product[2]} z≈Ç\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product[3]}\n\n"
    
    await message.answer(message_text)

@dp.message(Command("edit_product"))
async def edit_product(message: types.Message):
    if not await is_admin(message):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        # –§–æ—Ä–º–∞—Ç: /edit_product id|name|price|category|image_url
        product_data = message.text.replace('/edit_product ', '').split('|')
        if len(product_data) != 5:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /edit_product id|–Ω–∞–∑–≤–∞–Ω–∏–µ|—Ü–µ–Ω–∞|–∫–∞—Ç–µ–≥–æ—Ä–∏—è|—Å—Å—ã–ª–∫–∞_–Ω–∞_–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return

        product_id, name, price, category, image = product_data
        product_id = int(product_id)
        price = float(price)

        conn = sqlite3.connect('shop.db')
        c = conn.cursor()
        c.execute('''
            UPDATE products 
            SET name = ?, price = ?, category = ?, image = ?
            WHERE id = ?
        ''', (name, price, category, image, product_id))
        
        if c.rowcount > 0:
            conn.commit()
            await message.answer(f"–¢–æ–≤–∞—Ä —Å ID {product_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        else:
            await message.answer(f"–¢–æ–≤–∞—Ä —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
        conn.close()
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def is_admin(message: types.Message) -> bool:
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_ids = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    return message.from_user.id in admin_ids

async def get_products():
    conn = sqlite3.connect('shop.db')
    c = conn.cursor()
    c.execute('SELECT id, name, price, category, image, popularity FROM products')
    products = c.fetchall()
    conn.close()
    
    return [
        {
            'id': p[0],
            'name': p[1],
            'price': p[2],
            'category': p[3],
            'image': p[4],
            'popularity': p[5]
        }
        for p in products
    ]

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    init_db()
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
