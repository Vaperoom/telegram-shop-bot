import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    WebAppInfo
)
from dotenv import load_dotenv
import os
import uuid

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token='5037002755:AAH0SdUBgoGG27O3Gm6BS31cOKE286e3Oqo')
dp = Dispatcher()

# URL –≤–∞—à–µ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
WEBAPP_URL = "https://gademoffshit.github.io/telegram-shop-bot/"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
orders_data = {}

def get_main_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É", web_app=WebAppInfo(url=WEBAPP_URL))],
            [InlineKeyboardButton(text="–ß–∞—Ç –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º üí¨", callback_data="operator_chat")],
            [InlineKeyboardButton(text="–î–æ–ø–æ–º–æ–≥–∞", callback_data="help")],
            [InlineKeyboardButton(text="–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
        ]
    )
    return keyboard


def get_payment_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="Monobank", callback_data="pay_mono")],
            [InlineKeyboardButton(text="Blik", callback_data="pay_blik")],
            [InlineKeyboardButton(text="Crypto trc-20", callback_data="pay_crypto")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_order")]
        ]
    )
    return keyboard


def get_admin_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="all_orders")],
            [InlineKeyboardButton(text="–û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã", callback_data="waiting_orders")],
            [InlineKeyboardButton(text="–û–ø–ª–∞—á–µ–Ω–Ω—ã–µ", callback_data="paid_orders")],
            [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ", callback_data="shipped_orders")]
        ]
    )
    return keyboard


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "–†–∞–¥—ñ –±–∞—á–∏—Ç–∏ —Ç–µ–±–µ —É –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñ CHASER | HOTSPOT üëç\n\n"
        "–ö—É–ø—É–π —É–ª—é–±–ª–µ–Ω–∏–π —Å–º–∞–∫ –∑—Ä—É—á–Ω–æ —Ç–∞ 24/7 —á–µ—Ä–µ–∑ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç üåê",
        reply_markup=get_main_keyboard()
    )


@dp.callback_query(lambda c: c.data == "confirm_order")
async def process_confirm_order(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    user_id = callback.from_user.id
    order_id = str(uuid.uuid4())
    orders_data[order_id] = {
        "user_id": user_id,
        "status": "waiting for payment",
        "details": callback.message.text
    }
    await callback.message.edit_text(
        f"{callback.message.text}\n\n"
        "‚úÖ –î–∞–Ω—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ\n"
        "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:",
        reply_markup=get_payment_keyboard()
    )
    await callback.answer()


@dp.callback_query(lambda c: c.data.startswith("pay_"))
async def process_payment(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    payment_method = callback.data.split("_")[1]
    payment_info = {
        "mono": "Monobank:\n4441 1144 5791 2777\n–û—Ç—Ä–∏–º—É–≤–∞—á: –ú–∞–∫—Å–∏–º",
        "blik": "Blik:\n799 799 799",
        "crypto": "TRC20 USDT:\nTW6yb9RoWxHxXkgZvPG7nGW8ZzWJmYCYts"
    }

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –Ø —Å–ø–ª–∞—Ç–∏–≤", callback_data="payment_done")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_payment")]
        ]
    )

    await callback.message.edit_text(
        f"–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏:\n\n{payment_info[payment_method]}\n\n"
        "–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–Ø —Å–ø–ª–∞—Ç–∏–≤'",
        reply_markup=keyboard
    )
    await callback.answer()


@dp.callback_query(lambda c: c.data == "payment_done")
async def process_payment_confirmation(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã"""
    for order_id, order in orders_data.items():
        if order["user_id"] == callback.from_user.id and order["status"] == "waiting for payment":
            order["status"] = "paid"
            break
    await callback.message.edit_text(
        "‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!\n\n"
        "–ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ —ñ —Å–∫–æ—Ä–æ –≤—ñ–¥–ø—Ä–∞–≤–∏–º–æ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n"
        "–û—á—ñ–∫—É–π—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–æ–º–µ—Ä–æ–º –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="main_menu")
            ]]
        )
    )
    await callback.answer()


@dp.callback_query(lambda c: c.data == "back_to_payment")
async def back_to_payment(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    await callback.message.edit_text(
        "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:",
        reply_markup=get_payment_keyboard()
    )
    await callback.answer()


@dp.callback_query(lambda c: c.data == "admin_panel")
async def admin_panel(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    if str(callback.from_user.id) == '2122584931':  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await callback.message.answer("–ó–∞–∫–∞–∑—ã:", reply_markup=get_admin_keyboard())
    else:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
    await callback.answer()


@dp.callback_query(lambda c: c.data in ["all_orders", "waiting_orders", "paid_orders", "shipped_orders"])
async def filter_orders(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤"""
    status_map = {
        "all_orders": "–í—Å–µ –∑–∞–∫–∞–∑—ã",
        "waiting_orders": "waiting for payment",
        "paid_orders": "paid",
        "shipped_orders": "shipped"
    }
    selected_status = status_map.get(callback.data)
    orders_list = "–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:\n"
    for order_id, order in orders_data.items():
        if callback.data == "all_orders" or order["status"] == selected_status:
            orders_list += f"{order_id}: {order['status']}\n"
            orders_list += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order['details']}\n"
            orders_list += "------------------\n"
    if orders_list == "–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:\n":
        orders_list += "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if callback.message.text != orders_list:
        await callback.message.edit_text(orders_list, reply_markup=get_admin_keyboard())
    await callback.answer()


@dp.callback_query(lambda c: c.data == "main_menu")
async def back_to_main_menu(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "–†–∞–¥—ñ –±–∞—á–∏—Ç–∏ —Ç–µ–±–µ —É –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñ CHASER | HOTSPOT üëç\n\n"
        "–ö—É–ø—É–π —É–ª—é–±–ª–µ–Ω–∏–π —Å–º–∞–∫ –∑—Ä—É—á–Ω–æ —Ç–∞ 24/7 —á–µ—Ä–µ–∑ –Ω–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç üåê",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()


@dp.callback_query(lambda c: c.data == "operator_chat")
async def operator_chat(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —á–∞—Ç–∞ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"""
    await callback.message.answer(
        "–ù–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å."
    )
    await callback.answer()


@dp.callback_query(lambda c: c.data == "help")
async def help_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    help_text = (
        "üõç –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ '–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É'\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã\n"
        "3. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –∫–æ—Ä–∑–∏–Ω—É\n"
        "4. –û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑\n\n"
        "‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ß–∞—Ç –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º'"
    )
    await callback.message.answer(help_text)
    await callback.answer()


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
