import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    WebAppInfo
)
from dotenv import load_dotenv
import os
import uuid
import json

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token='5037002755:AAH0SdUBgoGG27O3Gm6BS31cOKE286e3Oqo')
dp = Dispatcher()

# URL –≤–∞—à–µ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
WEBAPP_URL = "https://vaperoom.github.io/telegram-shop-bot/"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
orders_data = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
pending_orders = {}

def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    buttons = [
        [{"text": "–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É", "web_app": {"url": WEBAPP_URL}}],
        [{"text": "–ß–∞—Ç –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º üí¨", "callback_data": "operator_chat"}],
        [{"text": "–î–æ–ø–æ–º–æ–≥–∞", "callback_data": "help"}],
        [{"text": "–ü—Ä–æ –Ω–∞—Å", "callback_data": "about_us"}]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_payment_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    buttons = [
        [{"text": "Monobank", "callback_data": "pay_mono"}],
        [{"text": "Blik", "callback_data": "pay_blik"}],
        [{"text": "Crypto trc-20", "callback_data": "pay_crypto"}],
        [{"text": "–ù–∞–∑–∞–¥", "callback_data": "back_to_order"}]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_admin_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    buttons = [
        [
            {"text": "–í—Å–µ –∑–∞–∫–∞–∑—ã", "callback_data": "all_orders"},
            {"text": "–û–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã", "callback_data": "waiting_orders"}
        ],
        [
            {"text": "–û–ø–ª–∞—á–µ–Ω–Ω—ã–µ", "callback_data": "paid_orders"},
            {"text": "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ", "callback_data": "shipped_orders"}
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_order_keyboard(order_id: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    buttons = [
        [
            {"text": "‚úÖ –ü—Ä–∏–Ω—è—Ç—å", "callback_data": f"accept_{order_id}"},
            {"text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", "callback_data": f"reject_{order_id}"}
        ],
        [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "back_to_orders"}]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def generate_order_id():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞"""
    return str(uuid.uuid4())


def create_order(user_id, order_data):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ order_data –∏–º–µ–µ—Ç –Ω—É–∂–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    required_fields = ['name', 'surname', 'phone', 'email', 'telegram', 'address', 'items', 'total']
    if not all(field in order_data for field in required_fields):
        raise ValueError("order_data is missing required fields")

    order_id = str(uuid.uuid4())[:8]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
    order = {
        'order_id': order_id,
        'user_id': user_id,
        'order_data': order_data,
        'status': '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
        'details': order_data  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
    }
    orders_data[order_id] = order
    return order_id


def send_order_confirmation_to_user(user_id, order_id):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    message = f"‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!\n\n–ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ —ñ —Å–∫–æ—Ä–æ –≤—ñ–¥–ø—Ä–∞–≤–∏–º–æ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n–û—á—ñ–∫—É–π—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–æ–º–µ—Ä–æ–º –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è.\n–í–∞—à –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order_id}"
    bot.send_message(chat_id=user_id, text=message)


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É VAPE ROOM | ELFBAR WROCLAW!\n\n"
        "–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –π–æ–≥–æ —Å—Ç–∞—Ç—É—Å.",
        reply_markup=get_main_keyboard()
    )


@dp.message(Command("admin"))
async def admin_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    if str(message.from_user.id) == '7356161144':  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=get_admin_keyboard())
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –ø–∞–Ω–µ–ª—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")


@dp.callback_query(lambda c: c.data == "confirm_order")
async def process_confirm_order(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
        await callback.message.edit_reply_markup(reply_markup=None)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = callback.message.text
        print(f"Processing message: {message_text}")

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –≤ —Ç–µ–≥–∞—Ö
        start_tag = '<json>'
        end_tag = '</json>'
        start_index = message_text.find(start_tag)
        end_index = message_text.find(end_tag)

        if start_index != -1 and end_index != -1:
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ JSON –≤ —Ç–µ–≥–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            json_text = message_text[start_index + len(start_tag):end_index]
            order_data = json.loads(json_text)
        else:
            # –ï—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–≥–∞—Ö, –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
            print("JSON tags not found, parsing message text")
            lines = message_text.split('\n')
            order_data = {
                'name': '',
                'surname': '',
                'phone': '',
                'email': '',
                'telegram': '',
                'address': '',
                'items': [],
                'total': 0,
                'deliveryPrice': 0
            }

            for line in lines:
                try:
                    line = line.strip()
                    if "–Ü–º'—è:" in line:
                        order_data['name'] = line.split("–Ü–º'—è:")[1].strip()
                    elif "–ü—Ä—ñ–∑–≤–∏—â–µ:" in line:
                        order_data['surname'] = line.split("–ü—Ä—ñ–∑–≤–∏—â–µ:")[1].strip()
                    elif "–¢–µ–ª–µ—Ñ–æ–Ω:" in line:
                        order_data['phone'] = line.split("–¢–µ–ª–µ—Ñ–æ–Ω:")[1].strip()
                    elif "Email:" in line:
                        order_data['email'] = line.split("Email:")[1].strip()
                    elif "Telegram:" in line:
                        order_data['telegram'] = line.split("@")[1].strip() if "@" in line else ""
                    elif "–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:" in line:
                        order_data['address'] = line.split("–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:")[1].strip()
                    elif "‚Ä¢" in line and "—à—Ç" in line:
                        try:
                            # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
                            item_info = line.replace('‚Ä¢', '').strip()
                            name_parts = item_info.split(' - ')
                            if len(name_parts) >= 2:
                                name = name_parts[0].strip()
                                quantity_part = name_parts[1].split('—à—Ç')[0].strip()
                                quantity = int(quantity_part)
                                order_data['items'].append({
                                    "name": name,
                                    "quantity": quantity,
                                    "price": 0  # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                                })
                        except Exception as e:
                            print(f"Error parsing item: {e}")
                    elif "–£—Å—å–æ–≥–æ:" in line:
                        try:
                            total = line.split('–£—Å—å–æ–≥–æ:')[1].replace('z≈Ç', '').strip()
                            order_data['total'] = float(total)
                        except Exception as e:
                            print(f"Error parsing total: {e}")
                except Exception as e:
                    print(f"Error parsing line '{line}': {e}")
                    continue

        print(f"Parsed order data: {order_data}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        user_id = callback.from_user.id
        order_id = create_order(user_id, order_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await callback.message.edit_text(
            f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏–π!\n–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order_id}\n\n"
            "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:",
            reply_markup=get_payment_keyboard()
        )
        await callback.answer("–ó–∞–∫–∞–∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏–π!")
        
    except Exception as e:
        print(f"Error processing order: {e}")
        print(f"Message text: {message_text if 'message_text' in locals() else 'Not available'}")
        await callback.message.answer(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {str(e)}")


@dp.callback_query(lambda c: c.data.startswith("pay_"))
async def process_payment(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    payment_method = callback.data.split("_")[1]
    payment_info = {
        "mono": "Monobank:\n4441 1144 5791 2777\n–û—Ç—Ä–∏–º—É–≤–∞—á: –ú–∞–∫—Å–∏–º",
        "blik": "Blik:\n799 799 799",
        "crypto": "TRC20 USDT:\nTW6yb9RoWxHxXkgZvPG7nGW8ZzWJmYCYts"
    }

    buttons = [
        [{"text": "‚úÖ –Ø —Å–ø–ª–∞—Ç–∏–≤", "callback_data": "payment_done"}],
        [{"text": "–ù–∞–∑–∞–¥", "callback_data": "back_to_payment"}]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_text(
        f"–†–µ–∫–≤—ñ–∑–∏—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç–∏:\n\n{payment_info[payment_method]}\n\n"
        "–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–Ø —Å–ø–ª–∞—Ç–∏–≤'",
        reply_markup=keyboard
    )
    await callback.answer()


@dp.callback_query(lambda c: c.data == "payment_done")
async def process_payment_confirmation(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã"""
    for order_id, order in orders_data.items():
        if order["user_id"] == callback.from_user.id and order["status"] == "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã":
            order["status"] = "–û–ø–ª–∞—á–µ–Ω"
            await bot.send_message(
                chat_id=callback.from_user.id,
                text=f"–í–∞—à –∑–∞–∫–∞–∑ —Å –Ω–æ–º–µ—Ä–æ–º {order_id} –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–π!"
            )
            break
    buttons = [
        [{"text": "–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", "callback_data": "main_menu"}]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(
        "‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!\n\n"
        "–ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –æ–ø–ª–∞—Ç—É —ñ –Ω–µ–∑–∞–±–∞—Ä–æ–º –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.\n"
        "–û—á—ñ–∫—É–π—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –Ω–æ–º–µ—Ä–æ–º –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è.",
        reply_markup=keyboard
    )
    await callback.answer()


@dp.callback_query(lambda c: c.data == "back_to_payment")
async def back_to_payment(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    await callback.message.edit_text(
        "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏:",
        reply_markup=get_payment_keyboard()
    )
    await callback.answer()


@dp.callback_query(lambda c: c.data == "operator_chat")
async def operator_chat(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —á–∞—Ç–∞ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"""
    await callback.message.answer(
        "–ù–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å."
    )
    await callback.answer()


@dp.callback_query(lambda c: c.data == "help")
async def help_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    help_text = (
        "üõç –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ '–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –º–∞–≥–∞–∑–∏–Ω—É'\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã\n"
        "3. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –∫–æ—Ä–∑–∏–Ω—É\n"
        "4. –û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑\n\n"
        "‚ùì –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ß–∞—Ç –∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º'"
    )
    await callback.message.answer(help_text)
    await callback.answer()


@dp.callback_query(lambda c: c.data == "about_us")
async def send_about_us(callback: types.CallbackQuery):
    about_text = (
        "–ü—Ä–æ –Ω–∞—Å Vape Room\n\n"
        "–ú–∏ ‚Äì –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏–π –º–∞–≥–∞–∑–∏–Ω –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∏—Ö —Å–∏–≥–∞—Ä–µ—Ç, —Ä—ñ–¥–∏–Ω –¥–ª—è –ø–æ–¥—ñ–≤ —Ç–∞ –∞–∫—Å–µ—Å—É–∞—Ä—ñ–≤. "
        "–í–∂–µ 3,5 —Ä–æ–∫–∏ –Ω–∞ —Ä–∏–Ω–∫—É, –∑–∞ —Ü–µ–π —á–∞—Å –º–∏ –æ–±—Ä–æ–±–∏–ª–∏ –ø–æ–Ω–∞–¥ 3000 –∑–∞–º–æ–≤–ª–µ–Ω—å —Ç–∞ –æ—Ç—Ä–∏–º–∞–ª–∏ "
        "–ø–æ–Ω–∞–¥ 1500 —Ä–µ–∞–ª—å–Ω–∏—Ö –≤—ñ–¥–≥—É–∫—ñ–≤ –≤—ñ–¥ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤.\n\n"
        "–ß–æ–º—É –æ–±–∏—Ä–∞—é—Ç—å –Ω–∞—Å?\n\n"
        "‚úÖ –®–≤–∏–¥–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ ‚Äì –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–æ —ñ–Ω—à–∏—Ö –º—ñ—Å—Ç –∑ –¥–æ—Å—Ç–∞–≤–∫–æ—é –∑–∞ 1-2 –¥–Ω—ñ.\n"
        "–Ñ —Å—É–º–Ω—ñ–≤–∏? –ù–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É —Ç–∞ –æ—Ç—Ä–∏–º–∞–π—Ç–µ –≤—ñ–¥–µ–æ—Ñ—ñ–∫—Å–∞—Ü—ñ—é –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!\n"
        "‚úÖ –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ ‚Äì –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –ø—Ä–æ—Ç—è–≥–æ–º 10-15 —Ö–≤–∏–ª–∏–Ω.\n"
        "‚úÖ –ì–Ω—É—á–∫–∞ —Å–∏—Å—Ç–µ–º–∞ –∑–Ω–∏–∂–æ–∫ ‚Äì –ø–æ—Å—Ç—ñ–π–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏ –æ—Ç—Ä–∏–º—É—é—Ç—å –≤–∏–≥—ñ–¥–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó.\n"
        "‚úÖ –ì—É—Ä—Ç–æ–≤–∞ —Ç–æ—Ä–≥—ñ–≤–ª—è ‚Äì –ø—Ä–∞—Ü—é—î–º–æ –∑ –≤–µ–ª–∏–∫–∏–º–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º–∏.\n\n"
        "–ù–∞—à–∞ –º–µ—Ç–∞ ‚Äì –Ω–∞–¥–∞—Ç–∏ —è–∫—ñ—Å–Ω–∏–π —Å–µ—Ä–≤—ñ—Å —Ç–∞ –Ω–∞–π–∫—Ä–∞—â–∏–π –≤–∏–±—ñ—Ä –ø—Ä–æ–¥—É–∫—Ü—ñ—ó –¥–ª—è –≤–µ–π–ø—ñ–Ω–≥—É. "
        "–ü—Ä–∏—î–¥–Ω—É–π—Ç–µ—Å—å –¥–æ Vape Room —Ç–∞ –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —Å–∞–º—ñ!"
    )
    
    buttons = [[{"text": "üõç –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "web_app": {"url": WEBAPP_URL}}]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.answer(about_text, reply_markup=keyboard)
    await callback.answer()


@dp.callback_query(lambda c: c.data == "main_menu")
async def process_main_menu(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        await callback.message.delete()
    except Exception as e:
        print(f"Error deleting message: {e}")

    await callback.message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()


@dp.callback_query(lambda c: c.data in ["all_orders", "waiting_orders", "paid_orders", "shipped_orders"])
async def process_order_filter(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤"""
    try:
        await callback.message.delete()
    except Exception as e:
        print(f"Error deleting message: {e}")

    status_map = {
        "all_orders": None,  # None –æ–∑–Ω–∞—á–∞–µ—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã
        "waiting_orders": "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã",
        "paid_orders": "–û–ø–ª–∞—á–µ–Ω",
        "shipped_orders": "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω"
    }
    
    selected_status = status_map.get(callback.data)
    title = "–í—Å–µ –∑–∞–∫–∞–∑—ã" if callback.data == "all_orders" else f"–ó–∞–∫–∞–∑—ã: {selected_status}"
    orders_list = f"üìã {title}:\n\n"
    
    buttons = []
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã
    filtered_orders = {
        order_id: order for order_id, order in orders_data.items()
        if (selected_status is None or order['status'] == selected_status)
        and order['status'] != '–û—Ç–∫–ª–æ–Ω–µ–Ω'  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    }
    
    for order_id, order in filtered_orders.items():
        button_text = f"–ó–∞–∫–∞–∑ #{order_id} - {order['status']}"
        buttons.append([{"text": button_text, "callback_data": f"view_order_{order_id}"}])
    
    buttons.append([
        {"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "callback_data": callback.data},
        {"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "main_menu"}
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    if not filtered_orders:
        orders_list += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"
    
    await callback.message.answer(orders_list, reply_markup=keyboard)
    await callback.answer()


@dp.callback_query(lambda c: c.data.startswith('view_order_'))
async def process_view_order(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞"""
    try:
        await callback.message.delete()
    except Exception as e:
        print(f"Error deleting message: {e}")

    order_id = callback.data.replace('view_order_', '')
    order = orders_data.get(order_id)
    
    if order:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
        details = order['details']
        formatted_details = (
            f"üì¶ –ó–∞–∫–∞–∑ #{order_id}\n\n"
            f"–°—Ç–∞—Ç—É—Å: {order['status']}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order['user_id']}\n\n"
            f"–ò–º—è: {details['name']}\n"
            f"–§–∞–º–∏–ª–∏—è: {details['surname']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {details['phone']}\n"
            f"Email: {details['email']}\n"
            f"Telegram: @{details['telegram']}\n"
            f"–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {details['address']}\n\n"
            f"–¢–æ–≤–∞—Ä—ã: {', '.join(item['name'] for item in details['items'])}\n"
            f"–°—É–º–º–∞: {details['total']} z≈Ç\n"
        )
        
        await callback.message.answer(
            formatted_details,
            reply_markup=get_order_keyboard(order_id)
        )
    await callback.answer()


@dp.callback_query(lambda c: c.data.startswith(('accept_', 'reject_')))
async def process_order_action(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    try:
        await callback.message.delete()
    except Exception as e:
        print(f"Error deleting message: {e}")

    action, order_id = callback.data.split('_')
    order = orders_data.get(order_id)
    
    if order:
        if action == 'accept':
            order['status'] = '–ü—Ä–∏–Ω—è—Ç'
            await bot.send_message(
                chat_id=order['user_id'],
                text=f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω!"
            )
        else:
            order['status'] = '–û—Ç–∫–ª–æ–Ω–µ–Ω'
            await bot.send_message(
                chat_id=order['user_id'],
                text=f"‚ùå –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω."
            )
        
        buttons = [[
            {"text": "üîô –ö —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤", "callback_data": "all_orders"},
            {"text": "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callback_data": "main_menu"}
        ]]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.answer(
            f"–ó–∞–∫–∞–∑ #{order_id} {order['status'].lower()}",
            reply_markup=keyboard
        )
    await callback.answer()


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
