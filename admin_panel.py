import os
from dotenv import load_dotenv
import json
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters, ConversationHandler

load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
(
    MAIN_MENU,
    ADD_PRODUCT_NAME,
    ADD_PRODUCT_PRICE,
    ADD_PRODUCT_CATEGORY,
    ADD_PRODUCT_IMAGE,
    EDIT_PRODUCT_SELECT,
    EDIT_PRODUCT_FIELD,
    EDIT_PRODUCT_VALUE,
    REMOVE_PRODUCT_CONFIRM,
) = range(9)

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
product_data = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('shop.db')
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            price REAL NOT NULL,
            category TEXT NOT NULL,
            image TEXT NOT NULL,
            popularity INTEGER DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_admin_keyboard():
    return ReplyKeyboardMarkup([
        ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', 'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä'],
        ['‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', 'üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤'],
        ['üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏']
    ], resize_keyboard=True)

def get_edit_field_keyboard():
    return ReplyKeyboardMarkup([
        ['–ù–∞–∑–≤–∞–Ω–∏–µ', '–¶–µ–Ω–∞'],
        ['–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'],
        ['üîô –ù–∞–∑–∞–¥']
    ], resize_keyboard=True)

def get_categories_keyboard():
    return ReplyKeyboardMarkup([
        ['–õ—é–¥–∏', '–û–¥–Ω–æ—Ä–∞–∑–∫–∏'],
        ['–ö–∞—Ä—Ç—Ä–∏–¥–∂–∏', '–ñ–∏–¥–∫–æ—Å—Ç–∏'],
        ['üîô –ù–∞–∑–∞–¥']
    ], resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_admin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return ConversationHandler.END

    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )
    return MAIN_MENU

async def add_product_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=ReplyKeyboardMarkup([['üîô –ù–∞–∑–∞–¥']], resize_keyboard=True)
    )
    return ADD_PRODUCT_NAME

async def add_product_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        return await show_admin_menu(update, context)
    
    product_data['name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
    return ADD_PRODUCT_PRICE

async def add_product_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        return await show_admin_menu(update, context)
    
    try:
        price = float(update.message.text)
        product_data['price'] = price
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=get_categories_keyboard()
        )
        return ADD_PRODUCT_CATEGORY
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
        return ADD_PRODUCT_PRICE

async def add_product_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        return await show_admin_menu(update, context)
    
    product_data['category'] = update.message.text
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=ReplyKeyboardMarkup([['üîô –ù–∞–∑–∞–¥']], resize_keyboard=True)
    )
    return ADD_PRODUCT_IMAGE

async def add_product_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        return await show_admin_menu(update, context)
    
    product_data['image'] = update.message.text
    
    try:
        conn = sqlite3.connect('shop.db')
        c = conn.cursor()
        c.execute(
            'INSERT INTO products (name, price, category, image) VALUES (?, ?, ?, ?)',
            (product_data['name'], product_data['price'], product_data['category'], product_data['image'])
        )
        conn.commit()
        conn.close()
        
        await update.message.reply_text(
            f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product_data['name']}\n"
            f"–¶–µ–Ω–∞: {product_data['price']} z≈Ç\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product_data['category']}\n",
            reply_markup=get_admin_keyboard()
        )
        product_data.clear()
        return MAIN_MENU
    
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}",
            reply_markup=get_admin_keyboard()
        )
        return MAIN_MENU

async def edit_product_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('shop.db')
    c = conn.cursor()
    c.execute('SELECT id, name, price FROM products')
    products = c.fetchall()
    conn.close()
    
    if not products:
        await update.message.reply_text(
            "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
            reply_markup=get_admin_keyboard()
        )
        return MAIN_MENU
    
    product_list = "\n".join([f"ID: {p[0]} - {p[1]} ({p[2]} z≈Ç)" for p in products])
    await update.message.reply_text(
        f"–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n\n{product_list}\n\n–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=ReplyKeyboardMarkup([['üîô –ù–∞–∑–∞–¥']], resize_keyboard=True)
    )
    return EDIT_PRODUCT_SELECT

async def edit_product_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        return await show_admin_menu(update, context)
    
    try:
        product_id = int(update.message.text)
        conn = sqlite3.connect('shop.db')
        c = conn.cursor()
        c.execute('SELECT * FROM products WHERE id = ?', (product_id,))
        product = c.fetchone()
        conn.close()
        
        if product:
            product_data['edit_id'] = product_id
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                reply_markup=get_edit_field_keyboard()
            )
            return EDIT_PRODUCT_FIELD
        else:
            await update.message.reply_text("–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return EDIT_PRODUCT_SELECT
    
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞:")
        return EDIT_PRODUCT_SELECT

async def edit_product_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        return await show_admin_menu(update, context)
    
    field = update.message.text.lower()
    product_data['edit_field'] = field
    
    if field == '–∫–∞—Ç–µ–≥–æ—Ä–∏—è':
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=get_categories_keyboard()
        )
    else:
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{field}':",
            reply_markup=ReplyKeyboardMarkup([['üîô –ù–∞–∑–∞–¥']], resize_keyboard=True)
        )
    return EDIT_PRODUCT_VALUE

async def edit_product_value(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        return await show_admin_menu(update, context)
    
    try:
        field = product_data['edit_field']
        value = update.message.text
        
        if field == '—Ü–µ–Ω–∞':
            value = float(value)
        
        conn = sqlite3.connect('shop.db')
        c = conn.cursor()
        
        field_map = {
            '–Ω–∞–∑–≤–∞–Ω–∏–µ': 'name',
            '—Ü–µ–Ω–∞': 'price',
            '–∫–∞—Ç–µ–≥–æ—Ä–∏—è': 'category',
            '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ': 'image'
        }
        
        sql_field = field_map.get(field)
        if sql_field:
            c.execute(
                f'UPDATE products SET {sql_field} = ? WHERE id = ?',
                (value, product_data['edit_id'])
            )
            conn.commit()
            conn.close()
            
            await update.message.reply_text(
                f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
                f"–ü–æ–ª–µ '{field}' –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{value}'",
                reply_markup=get_admin_keyboard()
            )
            product_data.clear()
            return MAIN_MENU
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                reply_markup=get_admin_keyboard()
            )
            return MAIN_MENU
    
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=ReplyKeyboardMarkup([['üîô –ù–∞–∑–∞–¥']], resize_keyboard=True)
        )
        return EDIT_PRODUCT_VALUE
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}",
            reply_markup=get_admin_keyboard()
        )
        return MAIN_MENU

async def remove_product_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('shop.db')
    c = conn.cursor()
    c.execute('SELECT id, name, price FROM products')
    products = c.fetchall()
    conn.close()
    
    if not products:
        await update.message.reply_text(
            "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
            reply_markup=get_admin_keyboard()
        )
        return MAIN_MENU
    
    product_list = "\n".join([f"ID: {p[0]} - {p[1]} ({p[2]} z≈Ç)" for p in products])
    await update.message.reply_text(
        f"–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n\n{product_list}\n\n–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=ReplyKeyboardMarkup([['üîô –ù–∞–∑–∞–¥']], resize_keyboard=True)
    )
    return REMOVE_PRODUCT_CONFIRM

async def remove_product_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        return await show_admin_menu(update, context)
    
    try:
        product_id = int(update.message.text)
        conn = sqlite3.connect('shop.db')
        c = conn.cursor()
        c.execute('DELETE FROM products WHERE id = ?', (product_id,))
        
        if c.rowcount > 0:
            conn.commit()
            await update.message.reply_text(
                f"‚úÖ –¢–æ–≤–∞—Ä —Å ID {product_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
                reply_markup=get_admin_keyboard()
            )
        else:
            await update.message.reply_text(
                f"‚ùå –¢–æ–≤–∞—Ä —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_admin_keyboard()
            )
        
        conn.close()
        return MAIN_MENU
    
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=ReplyKeyboardMarkup([['üîô –ù–∞–∑–∞–¥']], resize_keyboard=True)
        )
        return REMOVE_PRODUCT_CONFIRM

async def list_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect('shop.db')
    c = conn.cursor()
    c.execute('SELECT id, name, price, category FROM products')
    products = c.fetchall()
    conn.close()
    
    if not products:
        await update.message.reply_text(
            "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç.",
            reply_markup=get_admin_keyboard()
        )
        return MAIN_MENU
    
    product_list = "\n\n".join([
        f"ID: {p[0]}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {p[1]}\n"
        f"–¶–µ–Ω–∞: {p[2]} z≈Ç\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {p[3]}"
        for p in products
    ])
    
    await update.message.reply_text(
        f"üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n\n{product_list}",
        reply_markup=get_admin_keyboard()
    )
    return MAIN_MENU

async def show_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )
    return MAIN_MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def is_admin(user_id: int) -> bool:
    admin_ids = [123456789]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    return user_id in admin_ids

def main():
    init_db()
    
    application = Application.builder().token(TOKEN).build()

    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('admin', admin_panel)],
        states={
            MAIN_MENU: [
                MessageHandler(filters.Regex('^‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä$'), add_product_start),
                MessageHandler(filters.Regex('^üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä$'), edit_product_start),
                MessageHandler(filters.Regex('^‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä$'), remove_product_start),
                MessageHandler(filters.Regex('^üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤$'), list_products),
                MessageHandler(filters.Regex('^üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏$'), cancel),
            ],
            ADD_PRODUCT_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_product_name)
            ],
            ADD_PRODUCT_PRICE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_product_price)
            ],
            ADD_PRODUCT_CATEGORY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_product_category)
            ],
            ADD_PRODUCT_IMAGE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_product_image)
            ],
            EDIT_PRODUCT_SELECT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, edit_product_select)
            ],
            EDIT_PRODUCT_FIELD: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, edit_product_field)
            ],
            EDIT_PRODUCT_VALUE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, edit_product_value)
            ],
            REMOVE_PRODUCT_CONFIRM: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, remove_product_confirm)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(conv_handler)
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
